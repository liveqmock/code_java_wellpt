package com.wellsoft.pt.utils.file;

import java.io.*;

import org.apache.commons.compress.archivers.zip.*;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy;
import org.apache.commons.io.*;
import org.slf4j.*;

public class ArchiveUtils {
	private static Logger log = LoggerFactory.getLogger(ArchiveUtils.class);

	/**
	 * Recursively create ZIP archive from directory 
	 */
	public static void createZip(File path, String root, OutputStream os) throws IOException {
		log.debug("createZip({}, {}, {})", new Object[] { path, root, os });

		if (path.exists() && path.canRead()) {
			ZipArchiveOutputStream zos = new ZipArchiveOutputStream(os);
			zos.setComment("Generated by OpenKM");
			zos.setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy.ALWAYS);
			zos.setUseLanguageEncodingFlag(true);
			zos.setFallbackToUTF8(true);
			zos.setEncoding("UTF-8");

			// Prevents java.util.zip.ZipException: ZIP file must have at least one entry
			ZipArchiveEntry ze = new ZipArchiveEntry(root + "/");
			zos.putArchiveEntry(ze);
			zos.closeArchiveEntry();

			createZipHelper(path, zos, root);

			zos.flush();
			zos.finish();
			zos.close();
		} else {
			throw new IOException("Can't access " + path);
		}

		log.debug("createZip: void");
	}

	/**
	 * Recursively create ZIP archive from directory helper utility 
	 */
	private static void createZipHelper(File fs, ZipArchiveOutputStream zos, String zePath) throws IOException {
		log.debug("createZipHelper({}, {}, {})", new Object[] { fs, zos, zePath });
		File[] files = fs.listFiles();

		for (int i = 0; i < files.length; i++) {
			if (files[i].isDirectory()) {
				log.debug("DIRECTORY {}", files[i]);
				ZipArchiveEntry ze = new ZipArchiveEntry(zePath + "/" + files[i].getName() + "/");
				zos.putArchiveEntry(ze);
				zos.closeArchiveEntry();

				createZipHelper(files[i], zos, zePath + "/" + files[i].getName());
			} else {
				log.debug("FILE {}", files[i]);
				ZipArchiveEntry zae = new ZipArchiveEntry(zePath + "/" + files[i].getName());
				zos.putArchiveEntry(zae);
				FileInputStream fis = new FileInputStream(files[i]);
				IOUtils.copy(fis, zos);
				fis.close();
				zos.closeArchiveEntry();
			}
		}

		log.debug("createZipHelper: void");
	}
}
